restart
R = QQ[x_1..x_47]
--- Step 1
-- Input p(3x5),w(3x1),v_1(3x1),v_2(3x1)
p = matrix{{x_1,x_4,x_7,x_10,x_13},{x_2,x_5,x_8,x_11,x_14},{x_3,x_6,x_9,x_12,x_15}}
p1 = vector p_{0}; 
w = vector{x_16,x_17,x_18}
v_1 = vector{x_19,0,x_20}
v_2 = vector{0,x_21,x_22}

-- Cross Product
cross = method(Vector,Vector) := (u,v) -> (
    return diagonalMatrix(entries(u))*v
    )

funcStep1 = method(Vector,Vector,Vector) := (w,p,v) -> (
    n = #entries(w);
    f = new MutableList from {n:0};
    a = cross(w,p);
    for i from 0 to n-1 do(
    	f#i = sum(entries(cross(a,a)))*v_(i)^2-(w_(i)^2*p_(i)^2)
	);
    return f;
    )

-- Output: each one of f1 and f2 is a list of three polynomials
f1 = funcStep1(w,p1,v_2)
f2 = funcStep1(w,v_2,v_1)

--- Step 2
-- Input: d(3x5),data(2x5),
d = transpose matrix{{x_23,x_24,x_25},{x_26,x_27,x_28},{x_29,x_30,x_31},{x_32,x_33,x_34},{x_35,x_36,x_37}}
data = transpose matrix{{x_38,x_39},{x_40,x_41},{x_42,x_43},{x_44,x_45},{x_46,x_47}}

funcStep2 = method(Matrix,Matrix,Vector,ZZ) := (p,d,w,c) -> (
    n = #entries(transpose p);
    f = new MutableList from {n:0};
    pl = (transpose p)*w;
    dl = (transpose d)*w;
    for i from 0 to n-1 do(
    	f#i = dl_(i)*data_(c-1,i) - sum(entries(cross((dl_(i)*(vector(p_{i}))+pl_(i)*(vector(d_{i}))),v_(c))))
	);
    return f;
    )

-- Output: each one of f3 and f4 is a list of five polynomials

f3 = funcStep2(p,d,w,1);
f4 = funcStep2(p,d,w,2);
